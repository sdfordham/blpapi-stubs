from typing import ClassVar, Optional, Callable, List

from .abstractsession import AbstractSession
from .chandle import CHandle
from .event import Event
from .identity import Identity
from .internals import CorrelationId
from .message import Message
from .resolutionlist import ResolutionList
from .service import Service
from .session import Session
from .sessionoptions import SessionOptions
from .topic import Topic
from .topiclist import TopicList

class ServiceRegistrationOptions(CHandle):
    PRIORITY_LOW: ClassVar[int]
    PRIORITY_MEDIUM: ClassVar[int]
    PRIORITY_HIGH: ClassVar[int]
    PART_PUBLISHING: ClassVar[int]
    PART_OPERATIONS: ClassVar[int]
    PART_SUBSCRIBER_RESOLUTION: ClassVar[int]
    PART_PUBLISHER_RESOLUTION: ClassVar[int]
    PART_DEFAULT: ClassVar[int]
    def __init__(self) -> None: ...
    def setGroupId(self, groupId: str) -> None: ...
    def setServicePriority(self, priority: int) -> int: ...
    def getGroupId(self) -> str: ...
    def getServicePriority(self) -> int: ...
    def addActiveSubServiceCodeRange(
        self, begin: int, end: int, priority: int
    ) -> None: ...
    def removeAllActiveSubServiceCodeRanges(self) -> None: ...
    def setPartsToRegister(self, parts: int) -> None: ...
    def getPartsToRegister(self) -> int: ...

class ProviderSession(AbstractSession):
    AUTO_REGISTER_SERVICES: ClassVar[int]
    DONT_REGISTER_SERVICES: ClassVar[int]
    def __init__(
        self,
        options: Optional[SessionOptions] = ...,
        eventHandler: Optional[Callable[[Event, Session], Optional[bool]]] = ...,
        eventDispatcher: Optional[Callable[[Event, Session], Optional[bool]]] = ...,
    ) -> None: ...
    def start(self) -> bool: ...
    def startAsync(self) -> bool: ...
    def flushPublishedEvents(self, timeoutMsecs: int) -> bool: ...
    def stop(self) -> bool: ...
    def stopAsync(self) -> bool: ...
    def nextEvent(self, timeout: int = ...) -> Event: ...
    def tryNextEvent(self) -> Optional[Event]: ...
    def registerService(
        self,
        uri: str,
        identity: Optional[Event] = ...,
        options: Optional[ServiceRegistrationOptions] = ...,
    ) -> bool: ...
    def registerServiceAsync(
        self,
        uri: str,
        identity: Optional[Event] = ...,
        correlationId: Optional[CorrelationId] = ...,
        options: Optional[ServiceRegistrationOptions] = ...,
    ) -> CorrelationId: ...
    def resolve(
        self,
        resolutionList: ResolutionList,
        resolveMode: int = ...,
        identity: Optional[Identity] = ...,
    ) -> None: ...
    def resolveAsync(
        self,
        resolutionList: ResolutionList,
        resolveMode: int = ...,
        identity: Optional[Identity] = ...,
    ) -> None: ...
    def getTopic(self, message: Message) -> Topic: ...
    def createServiceStatusTopic(self, service: Service) -> Topic: ...
    def publish(self, event: Event) -> None: ...
    def sendResponse(self, event: Event, isPartialResponse: bool = ...) -> None: ...
    def createTopics(
        self,
        topicList: TopicList,
        resolveMode: int = ...,
        identity: Optional[Identity] = ...,
    ) -> None: ...
    def createTopicsAsync(
        self,
        topicList: TopicList,
        resolveMode: int = ...,
        identity: Optional[Identity] = ...,
    ) -> None: ...
    def activateSubServiceCodeRange(
        self, serviceName: str, begin: int, end: int, priority: int
    ) -> None: ...
    def deactivateSubServiceCodeRange(
        self, serviceName: str, begin: int, end: int
    ) -> None: ...
    def deregisterService(self, serviceName: str) -> bool: ...
    def terminateSubscriptionsOnTopic(
        self, topic: Topic, message: Optional[Message] = ...
    ) -> None: ...
    def terminateSubscriptionsOnTopics(
        self, topics: List[Topic], message: Optional[Message] = ...
    ) -> None: ...
    def deleteTopic(self, topic: Topic) -> None: ...
    def deleteTopics(self, topics: List[Topic]) -> None: ...
