from typing import Any, Optional, Union, List

from .chandle import CHandle
from .event import Event
from .internals import CorrelationId
from .name import Name
from .request import Request
from .schema import SchemaElementDefinition
from .session import Session
from .utils import Iterator

class Operation:
    def __init__(self, handle: Any, sessions: List[Session]) -> None: ...
    def name(self) -> Name: ...
    def description(self) -> str: ...
    def requestDefinition(self) -> SchemaElementDefinition: ...
    def numResponseDefinitions(self) -> int: ...
    def getResponseDefinitionAt(self, position: int) -> SchemaElementDefinition: ...
    def responseDefinitions(self) -> Iterator: ...

class Service(CHandle):
    def __init__(self, handle: Any, sessions: List[Session]) -> None: ...
    def toString(self, level: int = ..., spacesPerLevel: int = ...) -> str: ...
    def createPublishEvent(self) -> Event: ...
    def createAdminEvent(self) -> Event: ...
    def createResponseEvent(self, correlationId: CorrelationId) -> Event: ...
    def name(self) -> str: ...
    def description(self) -> str: ...
    def hasOperation(self, name: Name) -> bool: ...
    def getOperation(self, nameOrIndex: Union[Name, str, int]) -> Operation: ...
    def numOperations(self) -> int: ...
    def operations(self) -> Iterator: ...
    def hasEventDefinition(self, name: Union[Name, str]) -> bool: ...
    def getEventDefinition(
        self, nameOrIndex: Union[Name, str, int]
    ) -> SchemaElementDefinition: ...
    def numEventDefinitions(self) -> int: ...
    def eventDefinitions(self) -> Iterator: ...
    def authorizationServiceName(self) -> str: ...
    def createRequest(self, operation: Union[Operation, str]) -> Request: ...
    def createAuthorizationRequest(
        self, authorizationOperation: Optional[Operation] = ...
    ) -> Request: ...
