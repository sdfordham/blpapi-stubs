import datetime as dt
from typing import Any, ClassVar, Optional, Union, List, Dict

from .chandle import CHandle
from .element import Element, ElementIterator
from .event import Event
from .internals import CorrelationId
from .name import Name
from .service import Service
from .session import Session

service: Any

class Message(CHandle):
    FRAGMENT_NONE: ClassVar[int]
    FRAGMENT_START: ClassVar[int]
    FRAGMENT_INTERMEDIATE: ClassVar[int]
    FRAGMENT_END: ClassVar[int]
    RECAPTYPE_NONE: ClassVar[int]
    RECAPTYPE_SOLICITED: ClassVar[int]
    RECAPTYPE_UNSOLICITED: ClassVar[int]
    def __init__(
        self, handle: Any, event: Optional[Event] = ..., sessions: List[Session] = ...
    ) -> None: ...
    def __getitem__(
        self, name: Union[Name, str]
    ) -> Union[Element, bool, str, dt.datetime, int, float, Name]: ...
    def __iter__(self) -> ElementIterator: ...
    def __contains__(self, item) -> bool: ...
    def __len__(self) -> int: ...
    def messageType(self) -> Name: ...
    def fragmentType(self) -> int: ...
    def recapType(self) -> int: ...
    def topicName(self) -> str: ...
    def service(self) -> Service: ...
    def correlationId(self) -> CorrelationId: ...
    def correlationIds(self) -> List[CorrelationId]: ...
    def hasElement(
        self, name: Union[Name, str], excludeNullElements: bool = ...
    ) -> bool: ...
    def numElements(self) -> int: ...
    def getElement(self, name: Union[Name, str, int]) -> Element: ...
    def getElementAsBool(self, name: Union[Name, str]) -> bool: ...
    def getElementAsString(self, name: Union[Name, str]) -> str: ...
    def getElementAsInteger(self, name: Union[Name, str]) -> int: ...
    def getElementAsFloat(self, name: Union[Name, str]) -> float: ...
    def getElementAsDatetime(
        self, name: Union[Name, str]
    ) -> Union[dt.time, dt.date, dt.datetime]: ...
    def getRequestId(self) -> str: ...
    def asElement(self) -> Element: ...
    def toString(self, level: int = ..., spacesPerLevel: int = ...) -> str: ...
    def toPy(self) -> Union[List[Union[str, int]], Dict[str, Union[str, int]]]: ...
    def timeReceived(
        self, tzinfo: dt.tzinfo = ...
    ) -> Union[dt.time, dt.date, dt.datetime]: ...
