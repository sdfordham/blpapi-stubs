from typing import Dict, List, Union, Optional

from .chandle import CHandle
from .internals import CorrelationId

class SubscriptionList(CHandle):
    def __init__(self) -> None: ...
    def add(
        self,
        topic: str,
        fields: Optional[Union[str, List[str]]] = ...,
        options: Optional[Union[str, List[str], Dict]] = ...,
        correlationId: Optional[CorrelationId] = ...,
    ) -> int: ...
    def append(self, other: "SubscriptionList") -> int: ...
    def clear(self) -> int: ...
    def size(self) -> int: ...
    def correlationIdAt(self, index: int) -> CorrelationId: ...
    def topicStringAt(self, index: int) -> str: ...
    def addResolved(
        self, subscriptionString: str, correlationId: Optional[CorrelationId] = ...
    ) -> int: ...
    def isResolvedTopicAt(self, index: int) -> bool: ...
