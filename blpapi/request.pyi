from collections.abc import Mapping as Mapping_t
import datetime as dt
from typing import Any, Union, List, Dict

from .chandle import CHandle
from .element import Element
from .name import Name
from .session import Session

class Request(CHandle):
    def __init__(self, handle: Any, sessions: List[Session]) -> None: ...
    def __getitem__(
        self, name: Union[Name, str]
    ) -> Union[Element, bool, str, dt.datetime, int, float, Name]: ...
    def __setitem__(self, name: Union[Name, str], value: Dict[str, Any]) -> None: ...
    def set(self, name: Union[Name, str], value: Dict[str, Any]) -> None: ...
    def append(
        self,
        name: Union[Name, str],
        value: Union[bool, str, dt.datetime, int, float, Name],
    ): ...
    # Docstring for `fromPy` refers to `Element.fromPy` but describes `EventFormatter.fromPy`... FIXME
    def fromPy(
        self,
        requestDict: Mapping_t[
            Union[Name, str], Union[Element, bool, str, dt.datetime, int, float, Name]
        ],
    ) -> None: ...
    def asElement(self) -> Element: ...
    def getElement(self, name: Union[Name, str, int]) -> Element: ...
    def getRequestId(self) -> str: ...
    def toString(self, level: int = ..., spacesPerLevel: int = ...) -> str: ...
