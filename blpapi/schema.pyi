from typing import Any, ClassVar, Union, List

from .constant import ConstantList
from .name import Name
from .session import Session
from .utils import Iterator

class SchemaStatus:
    ACTIVE: ClassVar[int]
    DEPRECATED: ClassVar[int]
    INACTIVE: ClassVar[int]
    PENDING_DEPRECATION: ClassVar[int]

class SchemaElementDefinition:
    UNBOUNDED: ClassVar[int]
    def __init__(self, handle: Any, sessions: List[Session]) -> None: ...
    def name(self) -> Name: ...
    def description(self) -> str: ...
    def status(self) -> int: ...
    def typeDefinition(self) -> SchemaTypeDefinition: ...
    def minValues(self) -> int: ...
    def maxValues(self) -> int: ...
    def alternateNames(self) -> List[Name]: ...
    def toString(self, level: int = ..., spacesPerLevel: int = ...) -> str: ...

class SchemaTypeDefinition:
    def __init__(self, handle: Any, sessions: List[Session]) -> None: ...
    def datatype(self) -> int: ...
    def name(self) -> Name: ...
    def description(self) -> str: ...
    def status(self) -> int: ...
    def numElementDefinitions(self) -> int: ...
    def isComplexType(self) -> bool: ...
    def isSimpleType(self) -> bool: ...
    def isEnumerationType(self) -> bool: ...
    def hasElementDefinition(self, name: Union[Name, str]) -> bool: ...
    def getElementDefinition(
        self, nameOrIndex: Union[Name, str, int]
    ) -> SchemaElementDefinition: ...
    def elementDefinitions(self) -> Iterator: ...
    def enumeration(self) -> ConstantList: ...
    def toString(self, level: int = ..., spacesPerLevel: int = ...) -> str: ...
